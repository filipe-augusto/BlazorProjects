@page "/login"
@inject HttpClient http
@inject NavigationManager navigation
@inject TokenAuthenticationProvider authStateProvider

<div class="container col-6">

    <Aviso Exibir="loginFalhou">
        <h5>@Mensagem</h5>
    </Aviso>

    <div class="card">
        <div class="card-body">
            <h6 class="card-title"> Login</h6>
                <EditForm Model="userinfo" OnValidSubmit="FazerLogin">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label>Email</label>
                        <InputText class="form-control" @bind-Value="userinfo.Email" />
                        <ValidationMessage For="@(()=> userinfo.Email)" />
                    </div>
                    <div class="form-group">
                        <label>Password</label>
                        <InputText class="form-control" @bind-Value="userinfo.Password" />
                        <ValidationMessage For="@(()=> userinfo.Password)" />
                    </div>
                    <button type="submit" class="btn btn-outline-primary btn-sm">Login</button>
                </EditForm>
        </div>
    </div>
</div>


           

@code {
    private UserInfo userinfo = new UserInfo();
    bool loginFalhou = false;
    [Parameter]
    public string Mensagem { get; set; }

    async Task FazerLogin()
    {

        try
        {
            //   var result = await http.PostJsonAsync<UserToken>("api/account/login", userinfo);

            //var result = await http.PostJsonAsync<UserToken>("api/account/login", userinfo);

            var loginAsJson = JsonSerializer.Serialize(userinfo);

            var httpResponse = await http.PostAsync("api/account/login",
                     new StringContent(loginAsJson, Encoding.UTF8, "application/json"));

            if (httpResponse.IsSuccessStatusCode)
            {
                var responseAsString = await httpResponse.Content.ReadAsStringAsync();

                var loginResult = JsonSerializer.Deserialize<UserToken>(responseAsString,
                     new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

                await authStateProvider.Login(loginResult.Token);
                navigation.NavigateTo("/");
            }
            else
            {
                loginFalhou = true;
                Mensagem = $"Não foi possível realizar o Login do usuário.(Erro: {httpResponse.StatusCode})";
            }
        }
        catch (Exception)
        {
            loginFalhou = true;
            Mensagem = "Não foi possível realizar o Login do Usuário...";
        }
    }
}
