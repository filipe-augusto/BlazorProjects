@page  "/produto"

@inject HttpClient  http
@using System.Text.Json


@*<div class="form-inline">
        <label class="sr-only" for="filter-name">Filtro </label>
        <input type="text" class="form-control mb-2 mr-sm-2"
               @bind="nomeFiltro"
               placeholder="Filtrar pelo nome" />
        <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="Filtrar">
            Filtrar
        </button>
        <button type="button" class="btn btn-primary mr-sm-2 mb-2" @onclick="LimparFiltro">
            Limpar
        </button>
    </div>
    <br />*@

@if (produtos == null)
{
    <p><em>Carregando...</em></p>
}
else if (produtos.Count == 0)
{
    <p><em>Não existem produtos cadastradas...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Produto</th>
                <th>Descrição</th>
                <th>Preço</th>
                <th>Edita</th>
                <th>Deleta</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var produto in produtos)
            {
                <tr>
                    <td>@produto.Nome</td>
                    <td>@produto.Descricao</td>
                    <td>@produto.Preco</td>
                    <td><a class="btn btn-primary">Editar</a> </td>
                    <td><a class="btn btn-danger">Deletar</a> </td>
                </tr>
            }
        </tbody>
    </table>
}
<br />
<div>
    <a class="btn btn-success" href="produto/create">Nova Categoria</a>
</div>
<br />

@*<Confirma @ref="confirma" onCancela="@CancelaConfirma" onConfirma="@DeletaConfirma">
        <div>Deseja realmente excluir este item ?</div>
    </Confirma>*@

<hr />

@*<Paginacao QuantidadeTotalPaginas="QuantidadeTotalPaginas" paginaAtual="paginaAtual"
               Raio="2" PaginaSelecionada="PaginaSelecionada">

    </Paginacao>*@

@code {

    List<Produto> produtos { get; set; }

    private int QuantidadeTotalPaginas;
    private int paginaAtual = 1;
    private string nomeFiltro = string.Empty;

    //Confirma confirma;

    protected override async Task OnInitializedAsync()
    {
        await CarregaProdutos();
    }

    async Task CarregaProdutos(int pagina = 1, int quantidadePorPagina = 5)
    {

        produtos = await http.GetFromJsonAsync<List<Produto>>("/api/produto");
    }


    //private async Task Filtrar()
    //{
    //    paginaAtual = 1;
    //    await Carregaprodutos();
    //}
    //public async Task LimparFiltro()
    //{
    //    nomeFiltro = string.Empty;
    //    paginaAtual = 1;
    //    await Carregaprodutos();

    //}

    //private async Task PaginaSelecionada(int pagina)
    //{
    //    paginaAtual = pagina;
    //    await CarregaProdutos(pagina);
    //}



    //int codigoCategoria;
    //void DeletarCategoria(int categoriaId)
    //{
    //    confirma.Exibir();
    //    codigoCategoria = categoriaId;
    //}

    //async Task DeletaConfirma()
    //{
    //    await http.DeleteAsync($"api/categoria/{codigoCategoria}");
    //    confirma.Ocultar();
    //    await Carregaprodutos();
    //}

    //void CancelaConfirma()
    //{
    //    confirma.Ocultar();
    //}
}















@code {

}
