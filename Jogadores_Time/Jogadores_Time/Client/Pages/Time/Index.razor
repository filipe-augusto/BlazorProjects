@page "/time"
@inject HttpClient http



@if (Times == null)
{

    <p>Carregando...</p>

}
else if (Times.Count == 0)
{


    <p>não existe categorias</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Time</th>
                <th>Descrição</th>
                <th>Estado</th>
                <th>Quantidades de titulos</th>
                <th>Edita</th>
                <th>Deleta</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var time in Times.ToList())
            {
<tr>
    <td>@time.Nome</td>
    <td>@time.Descricao</td>
            <td>@time.Estado</td>
            <td>@time.QuantidadeDeTitulos</td>
    <td><a class="btn btn-primary" href="categoria/edit/@time.TimeId">Editar</a> </td>
    <td><a class="btn btn-danger" @onclick="@(()=> deletar(time.TimeId))">Deletar</a> </td>
</tr>}
        </tbody>
    </table>
}

@code {
    // Time[] Times { get; set; }
    List<Time> Times { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CarregaTime();
    }

    async Task CarregaTime()
    {
        try
        {
           Times = new List<Time>();
            Console.WriteLine("CarregaTime---");
            //  Times = await  http.GetFromJsonAsync<Time[]>("api/TimeController");
            Times = await http.GetFromJsonAsync<List<Time>>("api/TimeController/todos/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"---->>>{ex.Message}");
            throw;
        }
    }


    void deletar(int id)
    {

    }
}
