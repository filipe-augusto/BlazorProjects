@page "/autor"
@inject HttpClient http
@using System.Text.Json


<div class="form-inline">
    <label class="sr-only" for="filter-name">Filtro </label>
    <input type="text" class="form-control mb-2 mr-sm-2"
           @bind="nomeFiltro" placeholder="Filtrar pelo nome" />
    <button type="button" class="btn btn-primary mr-sm-2" @onclick="Filtrar">
        Filtrar
    </button>

    <button type="button" class="btn btn-danger mr-sm-2" @onclick="LimparFiltro">
        Limpar
    </button>
</div>

<h1>  Autores  </h1>

@if (autores == null)
{

    <p><em>Carregando ...</em></p>
}
else if (autores.Count == 0)
{
    <p>Não existe categorias...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Nome</th>
                <th>Nascionalidade</th>
                <th>Editar</th>
                <th>Deleta</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var autor in autores)
            {
                <tr>
                    <td>@autor.Nome</td>
                    <td>@autor.Nacionalidade</td>
                    <td> <a class="btn btn-primary" href="autor/edit/@autor.AutorId">Editar</a></td>
                    <td><a class="btn btn-danger" @onclick="@(() => DeletarAutor(autor.AutorId))">Deletar</a></td>

                </tr>
            }
        </tbody>
    </table>
}


<Confirma @ref="confirma" onCancela="@CancelaConfirma" onConfirma="@DeletaConfirma">
    <div>Deseja realmente excluir esse item?</div>
</Confirma>
<Paginacao QuantidadeTotalPaginas="QuantidadeTotalPaginas" paginaAtual="paginaAtual" Raio="2" PaginaSelecionada="PaginaSelecionada"></Paginacao>

<hr />
<div>
    <a class="btn btn-success" href="autor/create">Novo Autor</a>

</div>
@code {
    <!-- teste-->
    public bool isVerdade = true;

    //fim teste

    List<Autor> autores { get; set; }
    Confirma confirma;
    int codigoAutor;

    private int QuantidadeTotalPaginas;
    private int paginaAtual = 1;
    private string nomeFiltro = string.Empty;
    private async Task Filtrar()
    { paginaAtual = 1; await CarregaAutores(); }
    private async Task LimparFiltro()
    {
        nomeFiltro = string.Empty;
        paginaAtual = 1;
        await CarregaAutores(); }

    private async Task PaginaSelecionada(int pagina)
    {
        paginaAtual = pagina;
        await CarregaAutores(pagina);
    }

    protected override Task OnInitializedAsync()
    {
        return CarregaAutores();
    }
    async Task CarregaAutores(int pagina = 1, int quantidadePorPagina = 5)
    {
        var httpResponse =
          await http.GetAsync($"api/autor?pagina={pagina}&quantidadePorPagina={quantidadePorPagina}&nome={nomeFiltro}");
        //  await http.GetAsync($"api/categoria?pagina={pagina}&quantidadePorPagina={quantidadePorPagina}&nome={nomeFiltro}");
        if (httpResponse.IsSuccessStatusCode)
        {
            QuantidadeTotalPaginas =
                 int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            autores = JsonSerializer.Deserialize<List<Autor>>(responseString,
           new JsonSerializerOptions()
           {
               PropertyNameCaseInsensitive = true
           });
        }
    }
    //void apresentaModal()
    //{
    //    confirma.Exibir();
    //}

    void DeletarAutor(int autorId)
    {//deletar

        confirma.Exibir();
        codigoAutor = autorId;
    }
    async Task DeletaConfirma()
    {
        await http.DeleteAsync($"api/autor/{codigoAutor}"); //exluir
        confirma.Ocultar(); //ocultar
        await CarregaAutores(); //carregar as categorias
    }
    void CancelaConfirma()
    {
        confirma.Ocultar();
    }

}
