guia que pode mais de atraplhar do que ajudar. mas se voce nao sabe nada pode ajudar.

1. CRIAR AS CLASSES MODELS E SUAS PROPRIEDADES

2 . NO PROJETO SERVER ADD Microsoft.EntityFrameworkCore.sqlserver e
Microsoft.EntityFrameworkCore.tools

3. No projeto server add pasta context criar classe appdbcontext que herda de DbContext. Essa classe é usada para comunicar com banco de dados.
 	 3.1 - nessa classe adicionar um construtor
	''''''public AppDbContext (DbContextOptions<AppDbContext> options) : base(options){}''''''
 	3.2 -  Adicionar propriedades DbSet na classe a quantidade é igual a quantidade de classes no models(tabelas)
			''''''''''''     public DbSet<Categoria> Categoria { get; set; }
        public DbSet<Produto> Produtos { get; set; } ''''''''''''''' 
		Lembrando que  as models  precisam ser public


4. Definir  banco: Então precisa criar um aquivo json contendo a string de conexão. 
{
  "ConnectionStrings": {
    "DefaultConnection": "string de conexão"
  }
}

5. Criar um construtor na classe startup 
   '''''''''''''private readonly IConfiguration configuration;
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }''''''''''''''
6. adicionar no metodo ConfigureServices o codigo para conectar no banco:
  '''''''' services.AddDbContext<AppDbContext>(options =>
            options.UseSqlServer(configuration.GetConnectionString("DefaultConnection")));'''''''''''

7.aplicar os atributos nas propriedades do model. precisa incluir um pacote system.componentModel.Annotations no shared
  [MaxLength(100)]
8. FAZER O MIGRATION.  add-migration inicial_1 e depos database-update
9.no projeto server na pasta controoler adicionar os controlers.
	9.1 selecionar api controller empty e adicione um controoler para o model desejado
	9.2 depois na classe criada adicione um constutor para fazer a injeção de dependencia da 		classe do banco, context: 
 		''''''''  private readonly AppDbContext context;
       		 public CategoriaController(AppDbContext context)
        				{     this.context = context;   }
	9.3 depois de fazer a injeção da dependecia é possivel usar o banco.

	9.4 o primeiro metodo retorna todas as categorias: 
   	''''''''''''''''[HttpGet]
        public async Task <ActionResult<List<Categoria>>> Get()
        {
            return await context.Categoria.AsNoTracking().ToListAsync();
            //asnotracking desabilita o rastreamento das entidades e obtem um desempenho melhor
        }''''''''''''''''''''''''

	9.5 o metodo para retornar apenas uma categoria
	'''''''''''''' [HttpGet("{id}",Name ="GetCategoria")]
        public async Task<ActionResult<Categoria>> Get(int id)
        {return await context.Categoria.FirstOrDefaultAsync(x => x.CategoriaId ==id);}'''''''''
	
	9.6 metodo para cirar uma categoria
	''''''''''    public async Task<ActionResult<Categoria>> Post (Categoria categoria)
        {
            context.Add(categoria);
            await context.SaveChangesAsync();
            return new CreatedAtRouteResult("GetCategoria",
                new { id = categoria.CategoriaId }, categoria);
        }'''''''''''
	9.7 metodo para alterar categoria
      '''''''''''[HttpPut]
        public async Task<ActionResult<Categoria>> Put (Categoria categoria)
        {
            context.Entry(categoria).State = EntityState.Modified;
            await context.SaveChangesAsync();
            return Ok(categoria);
        }'''''''
	9.8 metodo para deletar uma categoria
       [HttpDelete("{id}")]
        '''''''public async Task<ActionResult<Categoria>>Delete (int id)
        {
            var categoria = new Categoria { CategoriaId = id };
            context.Remove(categoria);
            await context.SaveChangesAsync();
            return Ok(categoria);
        }'''''''
CRIANDO APLICAÇÃO BLAZOR PARA CATEGORIAS
10. CRIAR UMA PASTA CATEGORIA DENTRO DA PAGINA PAGES E  CRIAR ARQUIVO INDEX, DENTRO DA PASTA CATEGORIA. E REMOVER ARQUIVOS DESNECESSARIOS.
11.CRIAR LINK NO NAV MENU PARA CATEGORIA
12.No index de categoria, criar @page @page "/nome da categoria" e o inject @inject HttpClient http
13 No duas condições uma, para informar carregando enquanto for null e outra para informar que a lista esta fazio se o tamanho do array for igual a 0 depois criar uma table para carregar as categorias: 
''''''''''''
 <table class="table">
        <thead>
            <tr>
                <th>Categoria</th>
                <th>Descrição</th>
                <th>Edita</th>
                <th>Deleta</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var categoria in categorias)
            {
                <tr>
                    <td>@categoria.Nome</td>
                    <td>@categoria.Descricao</td>
                    <td> <a class="btn btn-primary">Editar</a></td>
                    <td><a class="btn btn-danger">Deletar</a></td>
                </tr>
            }
        </tbody>

    </table>
}
'''''''''''''''
14. criar um botao para Criar uma categoria
15. No @code criar um aarray de categoria
16 depois criar um metodo para iniciar quando  a pagina for carregada. e quadno a pagina for carregada ela vai preencher o array de categorias chamando o metodo que vai atribuir os dados do banco para o array:
''''''   protected override Task OnInitializedAsync()//metodo usado quando ocomponente é inicializado
    {
        return CarregaCategorias();
    }

    async Task CarregaCategorias()
    {
        categorias = await http.GetFromJsonAsync<Categoria[]>("api/categoria"); //recebe as categorias do banco
    }'''''''
CRIAR INCLUIR
17. Criar @page "categoria/create" e @inject httpclient 
19. criar editform e como model colocar uma categoria instanciada no @code
''''''''''
<EditForm Model="@categoria"></EditForm>
@code { Categoria categoria = new Categoria();}
''''''''''''
20. Criar os campos de input dentro do editform
''''''
   <div class="form-group">
        <label form="nome">Nome</label>
        <InputText @bind-Value="@categoria.Nome" class="form-control" />
    </div>
    <div class="form-group">
        <label form="descricao">Descrição</label>
        <InputText @bind-Value="@categoria.Descricao" class="form-control" />
    </div>
'''''''''
21 . criar as validações de erro no editform
'''''
<EditForm Model="@categoria">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
'''''''''
  <InputText @bind-Value="@categoria.Descricao" class="form-control" />
        <ValidationMessage For="@(()=>categoria.Descricao)" />
''''''''''
22 .Depois na classe model, e preciso colocar a validação nas propriedades
[Required(ErrorMessage ="o nome da categoria é obrigatorio")]

23. criar um button para salvar no componente create
'''' <button type="submit" class="btn btn-success">Salvar</button>
    '''''''
24. Criar o evento de criar categoria.
 Adicionar o OnValidSubmit no componente EditForm
depois o metodo:
'''''''''''
    async Task CriarCategoria()
    { await http.PostAsJsonAsync("api/categoria", categoria); }
''''''''''''''
25. Adicionar a rota do componente create no button CRIAR categoria.
26. Injetar o NavigationManager adicionar no metodo CriarCategoria o codigo:navigation.NavigateTo("categoria");. Isso para quando criar uma categoria ele volta para lista de categoria.
27. criar o button cancelar 
'''''<button type="submit" class="btn btn-danger" @onclick="(()=> navigation.NavigateTo("categoria"))">Cancelar</button>'''''''''
****************************************************************
BOTAO EDITAR
28. Criar componente de editar na pasta categoria e adicionar a rota e os injects. NESSA ROTA TEM UM PARAMETRO DE ROTA.
'''''@page "/categoria/edit/{categoriaId}"
@inject HttpClient hhtp
@inject NavigationManager navigation ''''''
29.Criar parametro categoriaId e um metodo para quando a pagina for carregada o parametro receber o valor pela url
'''''' 
[Parameter]
    public int categoriaid { get; set; }
    Categoria categoria = new Categoria();
    protected async override Task OnParametersSetAsync()
    {categoria = await http.GetFromJsonAsync<Categoria>($"api/categoria/{categoriaid}");}
''''' 
30. Adicionar o html editform. copiar do 'criar' mudando o model e onvliadsubmit
'''''''
<EditForm Model="@categoria" OnValidSubmit="@EditarCategoria">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label form="nome">Nome</label>
        <InputText @bind-Value="@categoria.Nome" class="form-control" />
        <ValidationMessage For="@(()=>categoria.Nome)" />
    </div>
    <div class="form-group">
        <label form="descricao">Descrição</label>
        <InputText @bind-Value="@categoria.Descricao" class="form-control" />
        <ValidationMessage For="@(()=>categoria.Descricao)" />
    </div>
    <button type="submit" class="btn btn-success">Editar</button>
    <button  class="btn btn-danger" @onclick="@(()=> navigation.NavigateTo("categoria"))">Cancelar</button>
</EditForm>
'''''''
31. Adcionar o metodo para editar
''''''''
    async Task EditarCategoria()
    {
        await http.PutAsJsonAsync("api/categoria", categoria);
        navigation.NavigateTo("categoria");
    }
''''''''
32. na pagina index adicionar a rota com parametro de rota no botão editar no componente index.
 <td> <a class="btn btn-primary" href="categoria/edit/@categoria.CategoriaId">Editar</a></td>
**********************************************
--CRAIR UM COMPONENTE PARA REAPROVEITAR O EDITAR E CRIAR
33. criar um novo componente CategoriaForm, copiar o html do editar e colocar nesse novo componente.
34. mudar o html para receber os parametros :
'''''''''[Inject]
    public NavigationManager navigation { get; set; }
    [Parameter]
    public Categoria categoria { get; set; }
    [Parameter]
    public string ButtonTextSubmit { get; set; }
    [Parameter]
    public string ButtonTextCancelar { get; set; }
    [Parameter]
    public EventCallback OnValidSubmit { get; set; }
'''''''''''
35. Depois trocar o editform pelo novo componente no index e no edit e mudar os atributos.
<CategoriaForm Categoria="@categoria" OnValidSubmit="@EditarCategoria"
               ButtonTextCancelar="Cancelar" ButtonTextSubmit="Alterar"></CategoriaForm>
------------------------------------------
incluir deletar
36. No index, nos botões deletar da tabela adicionar a chamada do metodo de deletar
@onclick="@(() => DeletarCategoria(categoria.CategoriaId))"
37. criar o metodo de deletar
   async void DeletarCategoria(int categoriaid) {//deletar
        await http.DeleteAsync($"api/categoria/{categoriaid}");
        await CarregaCategorias();
    }
38. criar o componente confirma que é um modal para aparecer quando for deletar uma categoria
39. Adicionar o componente confirma no index.
<Confirma @ref="confirma" onCancela="@CancelaConfirma" onConfirma="@DeletaConfirma">
    <div>Deseja realmente excluir esse item?</div>
</Confirma>
40. ajustar o metodo paar deletar a categoria.
''''''''''''''''''''''''''    
void DeletarCategoria(int categoriaid) {//deletar

        confirma.Exibir();
        codigoCategoria = categoriaid;
    }
    async Task DeletaConfirma()
    {
        await http.DeleteAsync($"api/categoria/{codigoCategoria}"); //exluir
        confirma.Ocultar(); //ocultar
        await CarregaCategorias(); //carregar as categorias
    }
    void CancelaConfirma()
    {
        confirma.Ocultar();
    }
'''''''''''''''''''''''
Paginação 

41. criar classe paginacao para setar os valores padroes:
''''''''''
namespace Catologo_Blazer.Shared.Recursos
{
class Paginacao{
        public int Pagina { get; set; }
        public int QuantidadePorPagina { get; set; }}}
''''''''''
42. Modificar o metodo que retorna uma list na controle. Colocar um parametro nele.
''''''''''''''''
   [HttpGet]
        public async Task <ActionResult<List<Categoria>>> Get([FromQuery] Paginacao paginacao)
        {
            var queryable = context.Categoria.AsQueryable();
            await HttpContext.InserirParametroEmPageResponse(queryable, paginacao.QuantidadePorPagina);
            return await queryable.Paginar(paginacao).ToListAsync();
        }
'''''''''''''
43. Criar uma pasta Utils no projeto server, e criar um classe com nome de HttpContextExtensions. Depois colocar o metodo abaixo nessa classe:

''''''
   public async static Task InserirParametroEmPageResponse<T>(this HttpContext context,
         IQueryable<T> queryable, int quantidadeTotalRegistrosAExibir)
        {
            if (context == null)
            {
                throw new ArgumentNullException(nameof(context));
            }

            double quantidadeRegistrosTotal = await queryable.CountAsync();
            double totalPaginas = Math.Ceiling(quantidadeRegistrosTotal / quantidadeTotalRegistrosAExibir);

            //salvando as informações no header do response
            context.Response.Headers.Add("quantidadeRegistrosTotal", quantidadeRegistrosTotal.ToString());
            context.Response.Headers.Add("totalPaginas", totalPaginas.ToString());
        }
'''''................

''''''''''''''''''
45. Criar na pasta utils uma classe QueryableExtensions para o skip e o take
  public  static class QueryableExtensions
    {
        public static IQueryable<T> Paginar<T>(this IQueryable<T> queryable, Paginacao paginacao)
        {
            return queryable
                .Skip((paginacao.Pagina - 1) * paginacao.QuantidadePorPagina)
                .Take(paginacao.QuantidadePorPagina);
        }
    }
...............................................
46. criar o componente paginacao na pasta shared
..........copiar
FILTRO
47. adicionar o html no index. campo inline para filtrar.
48. adicionar no @code a variavel do nome do filtro e o metodo diltrar
'''
    private string nomeFiltro = string.Empty;
    private async Task Filtrar()
    { paginaAtual = 1;  await CarregaCategorias(); }
''''
49. Mudar a forma da url para acrescentar o metodo.
    var httpResponse =
            await http.GetAsync($"api/categoria?pagina={pagina}&quantidadePorPagina={quantidadePorPagina}&nome={nomeFiltro}");
---------------------
50. ajustar o controlador. no metodo get list para filtrar o que vier no filtro.
..........................    
[HttpGet]
        public async Task <ActionResult<List<Categoria>>> Get([FromQuery] Paginacao paginacao, [FromQuery] string nome)
        {
            var queryable = context.Categoria.AsQueryable();
            if (!string.IsNullOrEmpty(nome))
            {
                queryable = queryable.Where(x => x.Nome.Contains(nome));
            }
         //   var queryable = context.Categorias.AsQueryable();
            await HttpContext.InserirParametroEmPageResponse(queryable, paginacao.QuantidadePorPagina);
            return await queryable.Paginar(paginacao).ToListAsync();
        }
...........................
51. criar o metodo para limpar o filtro:
   private async Task LimparFiltro()
    {
        nomeFiltro = string.Empty;
        paginaAtual = 1;
        await CarregaCategorias();
    }
**********************
colocar foco nos input
52.
criar arquivo js
'''''
function focusById(elementId) {
    var element = document.getElementById(elementoId);
    if (element) {
        element.focus();
    }
}
''''''''
53. Colocar o ID no input que irá receber o foco. No caso ele fica componente categoriaForm
54. criar dois metodos para quando carregar atribuir o foco e fazer um inject do 
@inject IJSRuntime js
:
   protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Focus("txtNomeCategoria");
        }
    }
    public async Task Focus(string elementId)
    {
        await js.InvokeVoidAsync("focusById", elementId);
    }
*************************************************
CRIANDO CONTROLADOR DO PRODUTO
55. Criar o controle para produto. precisa ser empty.
   //CONEXAO COM BANCO DE DADOS
        private readonly AppDbContext context;
        public ProdutoController(AppDbContext context)
        {
            this.context = context;
        }
        //RETORNAR UMA LISTA DE PRODUTOS
        [HttpGet]
        public async Task<ActionResult<List<Produto>>> Get()
        {
            return await context.Produtos.AsNoTracking().ToListAsync();
        }

        //RETORNAR UM PRODUTO IGUAL AO ID PASSADO PELO PARAMETRO
        [HttpGet("{id}",Name ="GetProduto")]
        public async Task<ActionResult<Produto>> Get(int id)
        {
            return await context.Produtos.FirstOrDefaultAsync(x => x.ProdutoId == id);
        }

        //CRIAR OU ADICIONAR UM NOVO PRODUTO
        [HttpPost]
        public async Task<ActionResult<Produto>> Post(Produto produto)
        {
            context.Add(produto);
            await context.SaveChangesAsync();
            return new CreatedAtRouteResult("GetProduto", new { id = produto.ProdutoId }, produto);
        }
        //EDITAR UM PRODUTO
        public async Task <ActionResult<Produto>> Put(Produto produto)
        {
            context.Entry(produto).State = EntityState.Modified;
            await context.SaveChangesAsync();
            return Ok(produto);
        }

        //EXCLUIR UM PRODUTO
        [HttpDelete ("{id}")]
        public async Task<ActionResult<Produto>> Delete (int id)
        {
            var produto = new Produto { ProdutoId = id };
            context.Remove(produto);
            await context.SaveChangesAsync();
            return Ok(produto);
        }
-----------------------------------------------------------------
56. Criar o componente index para produto. Basicamente copiar de categorias;





