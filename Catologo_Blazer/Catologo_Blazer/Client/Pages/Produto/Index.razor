@page "/produto"
@inject HttpClient http
@inject NavigationManager navigation
@using System.Text.Json
<div>
    <a class="btn btn-success" href="produto/create">Novo Produto</a>
</div>
<br />
@if (produtos == null)
{
    <p><em>Carregando...</em></p>
}
else if (produtos.Count == 0)
{
    <p><em>Não existe categorias...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Produto</th>
                <th>Descrição</th>
                <th>Preço</th>
                <th>Edita</th>
                <th>Deleta</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var produto in produtos)
            {
                <tr>
                    <td>@produto.Nome</td>
                    <td>@produto.Descricao</td>
                    <td>@produto.Preco</td>
                    <td> <a class="btn btn-primary" href="produto/edit/@produto.ProdutoId">Editar</a></td>
                    <td><a class="btn btn-danger" @onclick="@(()=> DeletarProduto(produto.ProdutoId))">Deletar</a></td>
                </tr>
            }
        </tbody>
    </table>
}
<hr />

<hr />
<Confirma @ref="confirma" onCancela="CancelaConfirma" onConfirma="DeletaConfirma">
    <div>Deseja realmente excluir este item?</div>
</Confirma>
<Paginacao QuantidadeTotalPaginas="QuantidadeTotalPaginas" paginaAtual="paginaAtual" Raio="2" PaginaSelecionada="PaginaSelecionada">

</Paginacao>


@code{
    List<Produto> produtos { get; set; }
    Confirma confirma;
    int codigoProduto;
    private string nomeFiltro = string.Empty;
    private int QuantidadeTotalPaginas;
    private int paginaAtual = 1;


    protected override async Task OnInitializedAsync()
    {
        await CarregaProdutos();
    }

    void DeletarProduto(int produtoId)
    {
        confirma.Exibir();
        codigoProduto = produtoId;
    }

    void CancelaConfirma()
    {
        confirma.Ocultar();
    }
    //async Task CarregaProdutos()
    //{
    //    produtos = await http.GetFromJsonAsync<List<Produto>>("/api/produto");
    //}
    private async Task PaginaSelecionada(int pagina)
    {
        paginaAtual = pagina;
        await CarregaProdutos(pagina);
    }
    async Task CarregaProdutos(int pagina = 1, int quantidadePorPagina = 5)
    {
        var httpResponse =
            await http.GetAsync($"api/produto?pagina={pagina}&quantidadePorPagina={quantidadePorPagina}&nome={nomeFiltro}");

        if (httpResponse.IsSuccessStatusCode)
        {
            QuantidadeTotalPaginas =
            int.Parse(httpResponse.Headers.GetValues("totalPaginas").FirstOrDefault());

            var responseString = await httpResponse.Content.ReadAsStringAsync();

            produtos = JsonSerializer.Deserialize<List<Produto>>(responseString,
                new JsonSerializerOptions()
                {
                    PropertyNameCaseInsensitive = true
                });
        }
        //categorias = await http.GetJsonAsync<Categoria[]>("/api/categoria");
    }

    async Task DeletaConfirma()
    {
        await http.DeleteAsync($"api/produto/{codigoProduto}");
        confirma.Ocultar();
        await CarregaProdutos();
    }


    private async Task Filtrar()
    {
        paginaAtual = 1;
        await CarregaProdutos();
    }
    private async Task LimparFiltro()
    {
        nomeFiltro = string.Empty;
        paginaAtual = 1;
        await CarregaProdutos();
    }
}


