@page "/produto"
@inject HttpClient http
@inject NavigationManager navigation


@if (produtos == null)
{
<p><em>Carregando...</em></p>
}
else if (produtos.Count == 0)
{
<p><em>Não existe categorias...</em></p>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th>Produto</th>
            <th>Descrição</th>
            <th>Preço</th>
            <th>Edita</th>
            <th>Deleta</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var produto in produtos)
        {
        <tr>
            <td>@produto.Nome</td>
            <td>@produto.Descricao</td>
            <td>@produto.Preco</td>
            <td> <a class="btn btn-primary" href="produto/edit/@produto.ProdutoId">Editar</a></td>
            <td><a class="btn btn-danger" @onclick="@(()=> DeletarProduto(produto.ProdutoId))">Deletar</a></td>
        </tr>
        }
    </tbody>
</table>
}
<hr/>
<div>
    <a class="btn btn-success" href="produto/create" >Novo Produto</a>
</div>
<hr/>
<Confirma @ref="confirma" onCancela="CancelaConfirma" onConfirma="DeletaConfirma">
    <div >Deseja realmente excluir este item?</div>
</Confirma>

@code{
    List<Produto> produtos { get; set; }
    Confirma confirma;
    int codigoProduto;
    protected override async Task OnInitializedAsync()
    {
        await CarregaProdutos();
    }

    void DeletarProduto(int produtoId)
    {
        confirma.Exibir();
        codigoProduto = produtoId;
    }

    void CancelaConfirma()
    {
        confirma.Ocultar();
    }
    async Task CarregaProdutos()
    {
        produtos = await http.GetFromJsonAsync<List<Produto>>("/api/produto");
    }

    async Task DeletaConfirma()
        {
        await http.DeleteAsync($"api/produto/{codigoProduto}");
        confirma.Ocultar();
        await CarregaProdutos();
    }
}


